"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require("@angular/core");
var HaversineService = (function () {
    function HaversineService() {
        this._earthRadiusInMeters = 6378137;
        this._earthRadiusInKilometers = 6371;
        this._earthRadiusInMiles = 3960;
    }
    HaversineService.prototype._toRadians = function (value) {
        return value * Math.PI / 180;
    };
    HaversineService.prototype._getDistance = function (coord1, coord2) {
        var φ1 = this._toRadians(coord1.latitude);
        var φ2 = this._toRadians(coord2.latitude);
        var Δφ = this._toRadians(coord2.latitude - coord1.latitude);
        var Δλ = this._toRadians(coord2.longitude - coord1.longitude);
        var a = Math.pow(Math.sin(Δφ / 2), 2) +
            Math.cos(φ1) *
                Math.cos(φ2) *
                Math.pow(Math.sin(Δλ / 2), 2);
        return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    };
    HaversineService.prototype.getDistanceInMeters = function (coord1, coord2) {
        var c = this._getDistance(coord1, coord2);
        return this._earthRadiusInMeters * c;
    };
    HaversineService.prototype.getDistanceInKilometers = function (coord1, coord2) {
        var c = this._getDistance(coord1, coord2);
        return this._earthRadiusInKilometers * c;
    };
    HaversineService.prototype.getDistanceInMiles = function (coord1, coord2) {
        var c = this._getDistance(coord1, coord2);
        return this._earthRadiusInMiles * c;
    };
    HaversineService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], HaversineService);
    return HaversineService;
}());
exports.HaversineService = HaversineService;
//# sourceMappingURL=haversine.service.js.map